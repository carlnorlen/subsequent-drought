q()
remove.packages('terra')
.libPaths
.libPaths()
remove.packages('terra', "C:/Users/can02/AppData/Local/Programs/R-4.0.2/library")
#Set up a python environment
# ee_install(py_env = "rgee")
library('rgee')
#Initialize Google Earth Engine
ee_Initialize(user = 'cnorlen@uci.edu', drive = TRUE)
p <- c('rgee', 'terra', 'sf')
# install.packages(p,repo='https://cran.r-project.org/')
# install.packages(c('ggmap'),repo='https://cran.r-project.org/')
lapply(p,require,character.only=TRUE)
#Intialize RGEE
ee_Initialize(user = 'cnorlen@uci.edu', drive = 'TRUE')
srtm <- ee$Image("USGS/SRTMGL1_003")
#Intialize RGEE
ee_Initialize(user = 'cnorlen@uci.edu')
srtm <- ee$Image("USGS/SRTMGL1_003")
viz <- list(
max = 4000,
min = 0,
palette = c("#000000","#5AAD5A","#A9AD84","#FFFFFF")
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM',
legend = TRUE
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM'
)
ee_check()
ee_check_python()
ee_check_credentials()
ee_Initialize(user='cnorlen@uci.edu', drive = TRUE)
email <- "cnorlen@uci.edu"
oauth_func_path <- system.file("python/ee_utils.py", package = "rgee")
utils_py <- rgee:::ee_source_python(oauth_func_path)
ee_path <- ee_utils_py_to_r(utils_py$ee_path())
email_clean <- gsub("@gmail.com", "", email)
ee_path_user <- sprintf("%s/%s", ee_path, email_clean)
print(ee_path_user)
# Is there some Google Drive Token in this Folder?
full_credentials <- list.files(path = ee_path_user, full.names = TRUE)
drive_condition <- grepl(".*_.*@.*", basename(full_credentials))
googledrive::drive_auth(
email = NULL,
cache = ee_path_user
)
full_credentials
drive_condition
email <- "cnorlen@uci.edu"
oauth_func_path <- system.file("python/ee_utils.py", package = "rgee")
utils_py <- rgee:::ee_source_python(oauth_func_path)
ee_path <- ee_utils_py_to_r(utils_py$ee_path())
email_clean <- gsub("@gmail.com", "", email)
ee_path_user <- sprintf("%s/%s", ee_path, email_clean)
# Is there some Google Drive Token in this Folder?
full_credentials <- list.files(path = ee_path_user, full.names = TRUE)
drive_condition <- grepl(".*_.*@.*", basename(full_credentials))
drive_credentials <- full_credentials[drive_condition]
email <- sub("^[^_]*_", "", basename(drive_credentials))
print(ee_path_user)
print(email)
ee_clean_credentials("cnorlen@uci.edu")
ee_Initialize("cnorlen")
ee_Initialize("cnorlen", drive = TRUE)
googledrive::drive_auth(email="cnorlen@uci.edu")
gargle_oauth_email = "cnorlen@uci.edu"
googledrive::drive_auth(email= gargle::gargle_oath_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/drive",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL)
library(googledrive)
googledrive::drive_auth(email= gargle::gargle_oath_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/drive",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL)
googledrive::drive_auth(email= "cnorlen@uci.edu")
ee_check_credentials()
ee_Initialize(drive = TRUE)
library(Rcpp)
install.packages('Rcpp',repo='https://cran.r-project.org/')
install.packages("Rcpp", repo = "https://cran.r-project.org/")
library(Rcpp)
install.packages('httpuv',repo='https://cran.r-project.org/')
library(httpuv)
ee_Initialize(drive = TRUE)
library(rgee)
ee_Initialize(drive = TRUE)
p <- c('dplyr','tidyr','ggplot2','ggpubr','segmented', 'patchwork','RColorBrewer','gt', 'gtsummary',
'webshot', 'kableExtra', 'broom', 'ggpmisc', 'relaimpo', 'mlr', 'caret', 'stats', 'purrr',
'nlme')
#Load packages
lapply(p,require,character.only=TRUE)
#Set working directory
setwd('C:/Users/can02/mystuff/subsequent-drought')
#Increase the memory limit for R. Helps with spatially explicit analyses.
memory.limit(32000)
#Read in csv data for Regression Data Sets
dir_in <- "D:\\Large_Files\\Landsat"
# all.ca <- read.csv(file.path(dir_in, "Regression_all_socal_300m_v23.csv"))
all.ca <- read.csv(file.path(dir_in, "Regression_all_socal_300m_v24.csv"))
#Calculate the difference between SPI48 2002 and SPI48 2015
all.ca$dSPI48 <- abs(all.ca$spi48_09_2015 - all.ca$spi48_09_2002)
#Adding a drought sequence column to the data set
all.ca <- all.ca %>% mutate(drought.sequence = case_when((spi48_09_2002 <= -1.5) & (spi48_09_2015 <= -1.5) & (dSPI48 <= 0.5) ~ 'Both Droughts',
(spi48_09_2015 <= -1.5) & (spi48_09_2002 > spi48_09_2015) & (spi48_09_2002 > -1.5) & (dSPI48 > 0.5) ~ '2nd Drought Only',
(spi48_09_2002) <= -1.5 & (spi48_09_2002 < spi48_09_2015) & (spi48_09_2015 > -1.5) & (dSPI48 > 0.5) ~ '1st Drought Only'))
#Check if PET_4yr_2009 is postive or negative
all.ca %>% filter(drought.sequence == 'Both Droughts') %>% dplyr::select(PET_4yr_2009, PET_4yr_2002, PET_4yr_2015) %>%
summarize(PET_2002.mean = mean(PET_4yr_2002), PET_2009.mean = mean(PET_4yr_2009), PET_2015.mean = mean(PET_4yr_2015))
#Select columns of data
all.ca.1stDrought <- dplyr::select(all.ca, c(system.index, dNDMI_2004, PET_4yr_2002, ppt_4yr_2002, tmax_4yr_2002, ET_4yr_2002, biomass_1999, ADS_2004, spi48_09_2002, elevation, latitude, longitude, USFS_zone, drought.sequence))
#Add the year of the 1999-2002 data
all.ca.1stDrought$drought <- '1999-2002'
#Rename the columns
colnames(all.ca.1stDrought) <- c('pixel.id', 'dNDMI', 'PET_4yr', 'ppt_4yr', 'tmax_4yr', 'ET_4yr', 'biomass', 'ADS', 'spi48', 'elevation', 'latitude', 'longitude', 'USFS', 'sequence', 'drought')
#Select columns of the 2012-2015 data
all.ca.2ndDrought <- dplyr::select(all.ca, c(system.index, dNDMI_2017, PET_4yr_2015, ppt_4yr_2015, tmax_4yr_2015, ET_4yr_2015, biomass_2012, ADS_2017, spi48_09_2015, elevation, latitude, longitude, USFS_zone, drought.sequence))
#Add the year of the 2012-2015 data
all.ca.2ndDrought$drought <- '2012-2015'
#Rename the columns
colnames(all.ca.2ndDrought) <- c('pixel.id', 'dNDMI', 'PET_4yr', 'ppt_4yr', 'tmax_4yr', 'ET_4yr', 'biomass', 'ADS', 'spi48', 'elevation', 'latitude', 'longitude', 'USFS', 'sequence', 'drought')
#Combine all the data in one data frame
all.ca.combined <- rbind(all.ca.1stDrought, all.ca.2ndDrought)
#Translate the region code to text
all.ca.combined$region[all.ca.combined$USFS == 261] <- "Sierra Nevada"
all.ca.combined$region[all.ca.combined$USFS == 262] <- "Southern California"
#Convert the ADS data to categorical mortality or no mortality
all.ca.combined <- all.ca.combined %>% mutate(ADS.cat = case_when(
(ADS) >= 5 ~ 1, #mortality
(ADS) < 5 ~ 0)) #no mortality
#Make drought sequence into dummy categorical variables for statistical analysis
all.ca.sample <- all.ca.combined %>% mutate(sequence.f = case_when(
sequence == 'Both Droughts' ~ 0,
sequence == '2nd Drought Only' ~ 1))
#Make years into dummy variables for statistical analysis
all.ca.sample <- all.ca.sample %>% mutate(drought.f = case_when(
drought == '1999-2002' ~ 0,
drought == '2012-2015' ~ 1))
#Select the drought sequence samples and data columns for analysis
dataset <- all.ca.sample %>% dplyr::filter(sequence == 'Both Droughts' | sequence == '2012-2015 Only') %>%
dplyr::select('PET_4yr', 'NDMI', 'dNDMI', 'drought.f', 'sequence.f', 'biomass', 'pixel.id', 'tmax_4yr', 'ADS.cat')
#Convert the dummy variables to a numeric format
dataset$sequence.f <- as.numeric(dataset$sequence.f)
dataset$drought.f <- as.numeric(dataset$drought.f)
#Calculate sample size for 1999-2002 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '1999-2002') %>% count()
#Calculate sample sizes for 2012-2015 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '2012-2015') %>% count()
#Convert dummy variable to factors
all.ca.sample$sequence.f <- all.ca.sample$sequence.f
all.ca.sample$drought.f <- all.ca.sample$drought.f
#Convert dummy variables to factors
dataset$sequence.f <- as.factor(dataset$sequence.f)
dataset$drought.f <- as.factor(dataset$drought.f)
dataset <- all.ca.sample %>% dplyr::filter(sequence == 'Both Droughts' | sequence == '2012-2015 Only') %>%
dplyr::select('PET_4yr', 'dNDMI', 'drought.f', 'sequence.f', 'biomass', 'pixel.id', 'tmax_4yr', 'ADS.cat')
#Convert the dummy variables to a numeric format
dataset$sequence.f <- as.numeric(dataset$sequence.f)
dataset$drought.f <- as.numeric(dataset$drought.f)
#Calculate sample size for 1999-2002 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '1999-2002') %>% count()
#Calculate sample sizes for 2012-2015 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '2012-2015') %>% count()
#Convert dummy variable to factors
all.ca.sample$sequence.f <- all.ca.sample$sequence.f
all.ca.sample$drought.f <- all.ca.sample$drought.f
#Convert dummy variables to factors
dataset$sequence.f <- as.factor(dataset$sequence.f)
dataset$drought.f <- as.factor(dataset$drought.f)
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.f")
task.under = undersample(task, rate = 0.2)
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.f", binary = TRUE)
task.under = undersample(task, rate = 0.2, binary = TRUE)
task = makeClassifTask(data = dataset, target = "sequence.f")
task
task.under = undersample(task, rate = 0.2, binary = TRUE)
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.f")
task.under = undersample(task, rate = 0.2, binary = TRUE)
task.under = undersample(task, rate = 0.2)
all.ca.sample <- all.ca.combined %>% mutate(sequence.c = case_when(
sequence == 'Both Droughts' ~ 0,
sequence == '2nd Drought Only' ~ 1))
#Make years into dummy variables for statistical analysis
all.ca.sample <- all.ca.sample %>% mutate(drought.c = case_when(
drought == '1999-2002' ~ 0,
drought == '2012-2015' ~ 1))
#Select the drought sequence samples and data columns for analysis
dataset <- all.ca.sample %>% dplyr::filter(sequence == 'Both Droughts' | sequence == '2012-2015 Only') %>%
dplyr::select('PET_4yr', 'dNDMI', 'drought.f', 'sequence.f', 'biomass', 'pixel.id', 'tmax_4yr', 'ADS.cat')
#Convert the dummy variables to a numeric format
dataset$sequence.n <- as.numeric(dataset$sequence.c)
dataset$drought.n <- as.numeric(dataset$drought.c)
#Calculate sample size for 1999-2002 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '1999-2002') %>% count()
#Calculate sample sizes for 2012-2015 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '2012-2015') %>% count()
#Convert dummy variable to factors
all.ca.sample$sequence.f <- all.ca.sample$sequence.f
all.ca.sample$drought.f <- all.ca.sample$drought.f
#Convert dummy variables to factors
dataset$sequence.f <- as.factor(dataset$sequence.f)
dataset$drought.f <- as.factor(dataset$drought.f)
dataset <- all.ca.sample %>% dplyr::filter(sequence == 'Both Droughts' | sequence == '2012-2015 Only') %>%
dplyr::select('PET_4yr', 'dNDMI', 'drought.c', 'sequence.c', 'biomass', 'pixel.id', 'tmax_4yr', 'ADS.cat')
#Convert the dummy variables to a numeric format
dataset$sequence.n <- as.numeric(dataset$sequence.c)
dataset$drought.n <- as.numeric(dataset$drought.c)
#Calculate sample size for 1999-2002 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '1999-2002') %>% count()
#Calculate sample sizes for 2012-2015 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '2012-2015') %>% count()
#Convert dummy variable to factors
all.ca.sample$sequence.f <- all.ca.sample$sequence.f
all.ca.sample$drought.f <- all.ca.sample$drought.f
#Convert dummy variables to factors
dataset$sequence.f <- as.factor(dataset$sequence.f)
dataset$drought.f <- as.factor(dataset$drought.f)
dataset$sequence.f <- as.factor(dataset$sequence.c)
dataset$drought.f <- as.factor(dataset$drought.c)
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.c")
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.f")
task.under = undersample(task, rate = 0.2)
task
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.n")
summary(dataset)
dataset <- all.ca.sample %>% dplyr::filter(sequence == 'Both Droughts' | sequence == '2nd Drought Only') %>%
dplyr::select('PET_4yr', 'dNDMI', 'drought.c', 'sequence.c', 'biomass', 'pixel.id', 'tmax_4yr', 'ADS.cat')
#Convert the dummy variables to a numeric format
dataset$sequence.n <- as.numeric(dataset$sequence.c)
dataset$drought.n <- as.numeric(dataset$drought.c)
#Calculate sample size for 1999-2002 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '1999-2002') %>% count()
all.ca.combined %>% dplyr::filter(drought == '1999-2002' & spi48 <= -1.5) %>% count()
#Calculate sample sizes for 2012-2015 and proportion impacted by drought
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count()
all.ca.combined %>% dplyr::filter(drought == '2012-2015' & spi48 <= -1.5) %>% count() / all.ca.combined %>% dplyr::filter(drought == '2012-2015') %>% count()
#Convert dummy variables to factors
dataset$sequence.f <- as.factor(dataset$sequence.c)
dataset$drought.f <- as.factor(dataset$drought.c)
summary(dataset)
#Create a task to undersample the drought sequence data by a factor of 0.2 for 2012-2015 Only
task = makeClassifTask(data = dataset, target = "sequence.f")
task
task.under = undersample(task, rate = 0.2)
#The undersampled dataset
dataset.under <- getTaskData(task.under)
