q()
remove.packages('terra')
.libPaths
.libPaths()
remove.packages('terra', "C:/Users/can02/AppData/Local/Programs/R-4.0.2/library")
#Set up a python environment
# ee_install(py_env = "rgee")
library('rgee')
#Initialize Google Earth Engine
ee_Initialize(user = 'cnorlen@uci.edu', drive = TRUE)
p <- c('rgee', 'terra', 'sf')
# install.packages(p,repo='https://cran.r-project.org/')
# install.packages(c('ggmap'),repo='https://cran.r-project.org/')
lapply(p,require,character.only=TRUE)
#Intialize RGEE
ee_Initialize(user = 'cnorlen@uci.edu', drive = 'TRUE')
srtm <- ee$Image("USGS/SRTMGL1_003")
#Intialize RGEE
ee_Initialize(user = 'cnorlen@uci.edu')
srtm <- ee$Image("USGS/SRTMGL1_003")
viz <- list(
max = 4000,
min = 0,
palette = c("#000000","#5AAD5A","#A9AD84","#FFFFFF")
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM',
legend = TRUE
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM'
)
ee_check()
ee_check_python()
ee_check_credentials()
ee_Initialize(user='cnorlen@uci.edu', drive = TRUE)
email <- "cnorlen@uci.edu"
oauth_func_path <- system.file("python/ee_utils.py", package = "rgee")
utils_py <- rgee:::ee_source_python(oauth_func_path)
ee_path <- ee_utils_py_to_r(utils_py$ee_path())
email_clean <- gsub("@gmail.com", "", email)
ee_path_user <- sprintf("%s/%s", ee_path, email_clean)
print(ee_path_user)
# Is there some Google Drive Token in this Folder?
full_credentials <- list.files(path = ee_path_user, full.names = TRUE)
drive_condition <- grepl(".*_.*@.*", basename(full_credentials))
googledrive::drive_auth(
email = NULL,
cache = ee_path_user
)
full_credentials
drive_condition
email <- "cnorlen@uci.edu"
oauth_func_path <- system.file("python/ee_utils.py", package = "rgee")
utils_py <- rgee:::ee_source_python(oauth_func_path)
ee_path <- ee_utils_py_to_r(utils_py$ee_path())
email_clean <- gsub("@gmail.com", "", email)
ee_path_user <- sprintf("%s/%s", ee_path, email_clean)
# Is there some Google Drive Token in this Folder?
full_credentials <- list.files(path = ee_path_user, full.names = TRUE)
drive_condition <- grepl(".*_.*@.*", basename(full_credentials))
drive_credentials <- full_credentials[drive_condition]
email <- sub("^[^_]*_", "", basename(drive_credentials))
print(ee_path_user)
print(email)
ee_clean_credentials("cnorlen@uci.edu")
ee_Initialize("cnorlen")
ee_Initialize("cnorlen", drive = TRUE)
googledrive::drive_auth(email="cnorlen@uci.edu")
gargle_oauth_email = "cnorlen@uci.edu"
googledrive::drive_auth(email= gargle::gargle_oath_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/drive",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL)
library(googledrive)
googledrive::drive_auth(email= gargle::gargle_oath_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/drive",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL)
googledrive::drive_auth(email= "cnorlen@uci.edu")
ee_check_credentials()
ee_Initialize(drive = TRUE)
library(Rcpp)
install.packages('Rcpp',repo='https://cran.r-project.org/')
install.packages("Rcpp", repo = "https://cran.r-project.org/")
library(Rcpp)
install.packages('httpuv',repo='https://cran.r-project.org/')
library(httpuv)
ee_Initialize(drive = TRUE)
library(rgee)
ee_Initialize(drive = TRUE)
p <- c('grid', 'gridExtra','dplyr', 'tidyr','ggplot2','ggpubr',
'patchwork','RColorBrewer','gt', 'gtsummary', 'webshot',
'stargazer', 'kableExtra', 'broom', 'svglite','sjPlot','purrr', 'magick', 'magrittr',
'knitr', 'xtable', 'mgcv')
# Load packages
lapply(p,require,character.only=TRUE)
#Set working directory
setwd('C:/Users/can02/mystuff/subsequent-drought')
#Directory to load data from
dir_in <- "D:\\Large_Files\\Landsat"
#Load CSV data into the script.
all.ca <- read.csv(file.path(dir_in, "Regression_all_socal_300m_v23.csv"))
#Calculate the difference in SPI48 between 2002 and 2015
all.ca$dSPI48 <- abs(all.ca$spi48_09_2015 - all.ca$spi48_09_2002)
#Sort pixels by drought sequence
all.ca <- all.ca %>% mutate(drought.sequence = case_when((spi48_09_2002 <= -1.5) & (spi48_09_2015 <= -1.5) & (dSPI48 <= 0.5) ~ 'Both Droughts',
(spi48_09_2015 <= -1.5) & (spi48_09_2002 > spi48_09_2015) & (spi48_09_2002 > -1.5) & (dSPI48 > 0.5) ~ '2012-2015 Only',
(spi48_09_2002) <= -1.5 & (spi48_09_2002 < spi48_09_2015) & (spi48_09_2015 > -1.5) & (dSPI48 > 0.5) ~ '1999-2002 Only'))
#Add Categorical ADS mortality data data
all.ca <- all.ca %>% mutate(ADS_2004.cat = case_when(
(ADS_2004) >= 5 ~ 1, #Mortality
(ADS_2004) < 5 ~ 0), #No Mortality
ADS_2017.cat = case_when(
(ADS_2017) >= 5 ~ 1, #Mortality
(ADS_2017) < 5 ~ 0)) #No Mortality
#Do binning by SPI48 and Pr-ET over four years.
all.ca.spi48 <- all.ca %>%
dplyr::mutate(socal = as.integer(USFS_zone == 262), sierra = as.integer(USFS_zone == 261)) %>% #Make new columns that have 0,1 for Sierra and socal to calculate proportions later
dplyr::mutate(spi48_09_2002.bin = cut(spi48_09_2002, breaks = seq(-3.5, 2, by = 0.1)),
spi48_09_2015.bin = cut(spi48_09_2015, breaks = seq(-3.5, 2, by = 0.1)),
) %>%
dplyr::group_by(spi48_09_2002.bin, spi48_09_2015.bin) %>%
dplyr::mutate(dNDMI_1994.mean = mean(dNDMI_1994)) %>%
dplyr::mutate(dNDMI_2004.mean = mean(dNDMI_2004)) %>%
dplyr::mutate(dNDMI_2017.mean = mean(dNDMI_2017)) %>%
dplyr::mutate(PET_4yr_1992.mean = mean(PET_4yr_1992)) %>%
dplyr::mutate(PET_4yr_2002.mean = mean(PET_4yr_2002)) %>%
dplyr::mutate(PET_4yr_2015.mean = mean(PET_4yr_2015)) %>%
dplyr::mutate(biomass_1999.mean = mean(biomass_1999)) %>%
dplyr::mutate(biomass_2012.mean = mean(biomass_2012)) %>%
dplyr::mutate(tmax_4yr_2002.mean = mean(tmax_4yr_2002)) %>%
dplyr::mutate(tmax_4yr_2015.mean = mean(tmax_4yr_2015)) %>%
dplyr::mutate(dNDMI_2004.median = median(dNDMI_2004)) %>%
dplyr::mutate(dNDMI_2017.median = median(dNDMI_2017)) %>%
dplyr::mutate(ADS_2004.mean = mean(ADS_2004)) %>%
dplyr::mutate(ADS_2017.mean = mean(ADS_2017)) %>%
dplyr::mutate(count = n()) %>%
dplyr::mutate(socal_count = sum(socal), sierra_count = sum(sierra)) %>%
dplyr::mutate(socal_prop = (socal_count / count) * 100, sierra_prop = (sierra_count / count) * 100) %>% # Calculate Sierra and SoCal proportions.
dplyr::mutate(dominant_region = as.integer(socal_prop > sierra_prop)) %>%
dplyr::mutate(ADS_2004.count = sum(ADS_2004.cat), ADS_2017.count = sum(ADS_2017.cat)) %>%
dplyr::mutate(ADS_2004.total = count, ADS_2017.total = count) %>%
dplyr::mutate(ADS_2004.prop = (ADS_2004.count / ADS_2004.total) * 100, ADS_2017.prop = (ADS_2017.count / ADS_2017.total) * 100) %>%
mutate(dSPI48 = abs(spi48_09_2015 - spi48_09_2002)) %>%
ungroup()
#Calculate proportion of Both Droughts in Socal
both.socal <- all.ca.spi48 %>% filter(drought.sequence == 'Both Droughts') %>% dplyr::select(socal) %>% sum()
both.count <- all.ca.spi48 %>% filter(drought.sequence == 'Both Droughts') %>% dplyr::select(socal) %>% count()
both.socal / both.count
#Calculate proportion of 2012-2015 Only in Sierra Nevada
second.socal <- all.ca.spi48 %>% filter(drought.sequence == '2012-2015 Only') %>% dplyr::select(sierra) %>% sum()
second.count <- all.ca.spi48 %>% filter(drought.sequence == '2012-2015 Only') %>% dplyr::select(sierra) %>% count()
second.socal / second.count
